kind: Template
apiVersion: v1
metadata:
  name: ${NAME}${SUFFIX}-deployment-template
  annotations:
    description: Deployment template for a NodeJS server.
    tags: nodejs
    iconClass: icon-nodejs
objects:
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ${NAME}-allow-ingress
      labels:
        name: ${NAME}-allow-ingress
        app: ${APP_NAME}
        app-group: ${APP_GROUP}
        role: ${ROLE}
        env: ${TAG_NAME}
    spec:
      description: |
        Allow traffic from routes into the ${ROLE} container(s).
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      podSelector:
        matchLabels:
          role: ${ROLE}
          app: ${APP_NAME}
          env: ${TAG_NAME}
      policyTypes:
        - Ingress
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ${NAME}
      labels:
        name: ${NAME}
        app: ${APP_NAME}
        env: ${TAG_NAME}
    spec:
      description: Allow the client to access the server.
      ingress:
        - from:
          - podSelector:
              matchLabels:
                role: ${CLIENT_ROLE}
                app: ${APP_NAME}
                env: ${TAG_NAME}
            namespaceSelector:
              matchLabels:
                name: ${NAMESPACE_NAME}
                environment: ${TAG_NAME}
          ports:
            - protocol: TCP
              port: ${{SERVICE_PORT}}
      podSelector:
        matchLabels:
          role: ${ROLE}
          app: ${APP_NAME}
          env: ${TAG_NAME}
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
      annotations:
        description: Exposes and load balances the application pods
      labels:
        name: ${NAME}${SUFFIX}
        app: ${APP_NAME}${SUFFIX}
        app-group: ${APP_GROUP}
        role: ${ROLE}
        env: ${TAG_NAME}
    spec:
      ports:
        - name: ${SERVICE_PORT}-tcp
          port: ${{SERVICE_PORT}}
          protocol: TCP
          targetPort: ${{SERVICE_PORT}}
      selector:
        name: ${NAME}${SUFFIX}
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}${SUFFIX}
        name: ${NAME}${SUFFIX}
        app-group: ${APP_GROUP}
        role: ${ROLE}
        env: ${TAG_NAME}
      name: ${NAME}${SUFFIX}
    spec:
      host: ${APPLICATION_DOMAIN}
      port:
        targetPort: 8080-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${NAME}${SUFFIX}
        weight: 100
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
      annotations:
        description: Defines how to deploy the application server
      labels:
        name: ${NAME}${SUFFIX}
        app: ${APP_NAME}${SUFFIX}
        app-group: ${APP_GROUP}
        role: ${ROLE}
        env: ${TAG_NAME}
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}${SUFFIX}
            from:
              kind: ImageStreamTag
              namespace: ${IMAGE_NAMESPACE}
              name: ${SOURCE_IMAGE_NAME}:${TAG_NAME}
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${NAME}${SUFFIX}
      template:
        metadata:
          name: ${NAME}${SUFFIX}
          labels:
            name: ${NAME}${SUFFIX}
            app: ${APP_NAME}${SUFFIX}
            app-group: ${APP_GROUP}
            role: ${ROLE}
            env: ${TAG_NAME}
        spec:
          volumes:
            - name: ${NAME}${SUFFIX}-app-config-volume
              configMap:
                name: ${APP_CONFIG_MAP_NAME}${SUFFIX}
                items:
                  - key: ${APP_CONFIG_FILE_NAME}
                    path: ${APP_CONFIG_FILE_NAME}
            - name: ${NAME}${SUFFIX}-data
              persistentVolumeClaim:
                claimName: ${NAME}${SUFFIX}
          containers:
            - name: ${NAME}${SUFFIX}
              image: ' '
              ports:
                - containerPort: ${{SERVICE_PORT}}
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                periodSeconds: 30
                initialDelaySeconds: 3
                timeoutSeconds: 20
                httpGet:
                  path: /
                  port: ${{SERVICE_PORT}}
              livenessProbe:
                failureThreshold: 5
                periodSeconds: 60
                initialDelaySeconds: 30
                timeoutSeconds: 20
                httpGet:
                  path: /
                  port: ${{SERVICE_PORT}}
              env:
                - name: PORT
                  value: ${SERVICE_PORT}
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              volumeMounts:
                - name: ${NAME}${SUFFIX}-app-config-volume
                  mountPath: ${APP_CONFIG_MOUNT_PATH}${APP_CONFIG_FILE_NAME}
                  subPath: ${APP_CONFIG_FILE_NAME}
                - name: ${NAME}${SUFFIX}-data
                  mountPath: ${MOUNT_PATH}
  - kind: HorizontalPodAutoscaler
    apiVersion: autoscaling/v1
    metadata:
      name: ${NAME}${SUFFIX}
      labels:
        name: ${NAME}${SUFFIX}
        app: ${APP_NAME}${SUFFIX}
        app-group: ${APP_GROUP}
        role: ${ROLE}
        env: ${TAG_NAME}
    spec:
      scaleTargetRef:
        kind: DeploymentConfig
        name: ${NAME}${SUFFIX}
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
      labels:
        name: ${NAME}${SUFFIX}
        app: ${APP_NAME}${SUFFIX}
        app-group: ${APP_GROUP}
        role: ${ROLE}
        env: ${TAG_NAME}
        template: ${NAME}${SUFFIX}
    spec:
      storageClassName: ${PERSISTENT_VOLUME_CLASS}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${PERSISTENT_VOLUME_SIZE}
  # - kind: NetworkSecurityPolicy
  #   apiVersion: security.devops.gov.bc.ca/v1alpha1
  #   metadata:
  #     name: custom-${APP_NAME}-pods-to-api
  #     labels:
  #       name: custom-${APP_NAME}-pods-to-api
  #       app: ${APP_NAME}
  #       app-group: ${APP_GROUP}
  #       role: ${ROLE}
  #       env: ${TAG_NAME}
  #   spec:
  #     description: 'Allow pods to talk to the internal api so deployments work.

  #       This only needs to be specified once per environment.

  #       '
  #     source:
  #       - - $namespace=${NAMESPACE_NAME}-${TAG_NAME}
  #     destination:
  #       - - int:network=internal-cluster-api-endpoint
parameters:
  - name: NAME
    displayName: Name
    description: The name assigned to all of the OpenShift resources associated to
      the server instance.
    required: true
    value: dsc-chat-server
  - name: APP_NAME
    displayName: App Name
    description: Used to group components together in the OpenShift console.
    required: true
    value: dsc-chat
  - name: APP_GROUP
    displayName: App Group
    description: The name assigned to all of the deployments in this project.
    required: true
    value: dsc-chat
  - name: SUFFIX
    displayName: Suffix
    description: A suffix applied to all of the objects in this template.
    required: false
    value: ''
  - name: ROLE
    displayName: Role
    description: The role of this service within the application - used for Network
      Policies
    required: true
  - name: CLIENT_ROLE
    displayName: Client Role
    description: The role of the client within the application - used for Network Policies
    required: true
    value: client
  - name: IMAGE_NAMESPACE
    displayName: Image Namespace
    required: true
    description: The namespace of the OpenShift project containing the imagestream
      for the application.
    value: a99fd4-tools
  - name: NAMESPACE_NAME
    displayName: Namespace Name
    description: The name of the namespace being deployed to..
    required: true
    value: a99fd4
  - name: SERVICE_PORT
    displayName: Service Port
    required: true
    description: The port exposed by the controller.
    value: '8080'
  - description: The exposed hostname that will route to the service, e.g., myappname.apps.silver.devops.gov.bc.ca,
      if left blank a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
    value: ''
  - name: APP_CONFIG_MAP_NAME
    displayName: Application Config Map Name
    description: The name of the configuration map holding the data to configure the
      application.
    required: true
    value: server-config
  - name: APP_CONFIG_MOUNT_PATH
    displayName: Application Config Mount Path
    description: The path to use to mount the configuration file(s).
    required: true
    value: /opt/app-root/src/config/
  - name: APP_CONFIG_FILE_NAME
    displayName: Application Config File Name
    description: The name of the application configuration file.
    required: true
    value: default.json
  - name: SOURCE_IMAGE_NAME
    displayName: Source Image Name
    description: The name of the image to use for this resource.
    required: true
    value: dsc-chat-server
  - name: TAG_NAME
    displayName: Environment TAG name
    description: The TAG name for this environment, e.g., dev, test, prod
    required: true
    value: latest
  - name: MOUNT_PATH
    displayName: Mount Path
    description: The path to mount the persistent volume.
    required: true
    value: /opt/app-root/src/data
  - name: PERSISTENT_VOLUME_SIZE
    displayName: Persistent Volume Size
    description: The size of the persistent volume , e.g. 512Mi, 1Gi, 2Gi.
    required: true
    value: 1Gi
  - name: PERSISTENT_VOLUME_CLASS
    displayName: Persistent Volume Class name
    description: The class of the volume; gluster-file, gluster-block, gluster-file-db,
      netapp-file-standard
    required: false
    value: netapp-file-standard
  - name: MIN_REPLICAS
    displayName: Minimum Replicas
    description: The minimum number of pods to have running.
    required: true
    value: '1'
  - name: MAX_REPLICAS
    displayName: Maximum Replicas
    description: The maximum number of pods to have running.
    required: true
    value: '2'
  - name: CPU_REQUEST
    displayName: Resources CPU Request
    description: The resources CPU request (in cores) for this build.
    required: true
    value: 10m
  - name: CPU_LIMIT
    displayName: Resources CPU Limit
    description: The resources CPU limit (in cores) for this build.
    required: true
    value: 300m
  - name: MEMORY_REQUEST
    displayName: Resources Memory Request
    description: The resources Memory request (in Mi, Gi, etc) for this build.
    required: true
    value: 10Mi
  - name: MEMORY_LIMIT
    displayName: Resources Memory Limit
    description: The resources Memory limit (in Mi, Gi, etc) for this build.
    required: true
    value: 256Mi
